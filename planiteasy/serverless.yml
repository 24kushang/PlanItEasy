# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: planiteasy
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: planiteasy
# "service" is the name of this project. This will also be added to your AWS resource names.
service: plan-it-easy

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  environment:
    DYNAMODB_TABLE: EventPlansTable
    COGNITO_USER_POOL_ID: ${self:custom.cognitoUserPoolId}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:ap-south-1:${aws:accountId}:table/EventPlansTable
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminInitiateAuth
          Resource: arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:custom.cognitoUserPoolId}

resources:
  Resources:
    # Event Plans Table
    EventPlansTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventPlansTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S # `id` is the primary key and is a string
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    # Users Table
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTable
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S # `userId` is the primary key and is a string
          - AttributeName: email
            AttributeType: S # Secondary Index for lookup by email
        KeySchema:
          - AttributeName: userId
            KeyType: HASH # Primary key for direct access
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL # Include all attributes in the index
        BillingMode: PAY_PER_REQUEST # Auto scales based on demand

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: EventPlanUserPool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireNumbers: true
            RequireSymbols: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: EventPlanUserPoolClient
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

custom:
  cognitoUserPoolId:
    Ref: CognitoUserPool

functions:
  addEventPlan:
    handler: src/handlers/addEvents.createEventHandler
    events:
      - httpApi:
          path: /addEvent
          method: POST
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognitoUserPoolId}
  
  getEventPlans:
    handler: src/handlers/getEvents.getEventsHandler
    events:
      - httpApi:
          path: /getEvent
          method: GET
          request:
            parameters:
              querystrings:
                limit: false
                lastkey: false

  updateEventPlans:
    handler: src/handlers/updateEvent.updateEventHandler
    events:
      - httpApi:
          path: /updateEvent
          method: PUT

  deleteEventPlan:
    handler: src/handlers/deleteEvent.deleteEventHandler
    events:
      - http:
          path: eventplan/{id}
          method: DELETE

  createUser:
    handler: src/handlers/createUser.createUserHandler
    events:
      - httpApi:
          path: /createUser
          method: POST
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognitoUserPoolId}
plugins:
  - serverless-plugin-typescript # Compile TS code
  - serverless-offline           # Run offline for local testing