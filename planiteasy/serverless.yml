org: planiteasy
app: planiteasy
service: plan-it-easy

custom:
  esbuild:
    minify: true
    sourcemap: false
    exclude: 
      - aws-sdk
    target: 'node20'
    platform: 'node'
    bundle: true           # Enable proper bundling
    packager: 'npm'
    outputFileExtension: '.js'
    packagePath: 'package.json'
    enableDynamicImport: true
    nativeZip: true
    # This is important - tells esbuild to exclude these from function bundles
    external:
      - 'aws-sdk'
      - 'aws-lambda'
      - '@types/aws-lambda'
  stage: ${opt:stage, 'dev'}  # Default to 'dev' if no stage is passed
  tableName: 
    develop: EventPlansTable-dev
    stage: EventPlansTable-stage
    prod: EventPlansTable-prod
  userTableName:
    develop: UserTable-dev
    stage: UserTable-stage
    prod: UserTable-prod

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  environment:
    STAGE: ${self:custom.stage}  # Use the stage defined above
    DYNAMODB_TABLE: ${self:custom.tableName.${self:custom.stage}, 'EventsTable'}  # Resolves based on the stage
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:ap-south-1:${aws:accountId}:table/${self:custom.tableName.${self:custom.stage}}
            - arn:aws:dynamodb:ap-south-1:${aws:accountId}:table/${self:custom.userTableName.${self:custom.stage}}

layers:
  dependencies:
    path: layer
    name: ${self:service}-dependencies-${self:custom.stage}
    description: Common dependencies for all functions
    compatibleRuntimes:
      - nodejs20.x
    package:
      patterns:
        - '!node_modules/.prisma/**'
        - '!node_modules/@types/**'
        - 'node_modules/**'

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!src/**/*.ts'
    - '!test/**'
    - '!.git/**'
    - '!.vscode/**'
    - '!*.json'
    - 'dist/handlers/*.js'  
resources:
  Resources:
    EventPlansTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.${self:custom.stage}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName.${self:custom.stage}}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

functions:
  addEventPlan:
    handler: dist/handlers/createEvents.createEventHandler
    events:
      - httpApi:
          path: /addEvent
          method: POST
    layers: 
      - {Ref: DependenciesLambdaLayer}

  getEventPlans:
    handler: dist/handlers/getEvents.getEventsHandler
    events:
      - httpApi:
          path: /getEvent
          method: GET
          request:
            parameters:
              querystrings:
                limit: false
                lastkey: false
    layers: 
      - {Ref: DependenciesLambdaLayer}

  updateEventPlans:
    handler: dist/handlers/updateEvent.updateEventHandler
    events:
      - httpApi:
          path: /updateEvent
          method: PUT
    layers: 
      - {Ref: DependenciesLambdaLayer}

  deleteEventPlan:
    handler: dist/handlers/deleteEvent.deleteEventHandler
    events:
      - httpApi:
          path: /eventplan/{id}
          method: DELETE
    layers: 
      - {Ref: DependenciesLambdaLayer}

  createUser:
    handler: dist/handlers/createUser.createUserHandler
    events:
      - httpApi:
          path: /createUser
          method: POST
    environment:
      USERS_DYNAMODB_TABLE: ${self:custom.userTableName.${self:custom.stage}}  # Resolve dynamically
    layers: 
      - {Ref: DependenciesLambdaLayer}